enum obj_type {LP, RP, VAL, ADD, SUB};

struct obj
{
    obj(obj_type type, double val = 0) {t = type; v = val;}
    obj_type t;
    double v;
};


void skipws(string &exp, size_t &q)
{
    exp.find_first_not_of(' ', q);
}

inline void new_val(stack<obj> &so, double v)
{
    if (so.empty() || so.top().t == LP)
    {
        so.push(obj(VAL, v));
    }
    else if (so.top().t == ADD || so.top().t == SUB)
    {
        obj_type type = so.top().t;
        so.pop();

        if (type == ADD)
            v += so.top().v;
        else
            v = so.top().v - v;
        so.pop();
        so.push(obj(VAL, v));
    }
    else
        throw invalid_argument("没有运算符");
}

int main()
{
    stack<obj> so;
    double v;
    string exp;
    size_t q = 0, p;

    cout << "输入表达式" << endl;
    getline(cin, exp);

    skipws(exp, q);

    while (q != exp.size())
    {
        if (exp[q] == '(')
        {
            if (so.empty())
            {
                so.push(obj(LP));
                ++q;
            }
            else
                throw invalid_argument("第一个字符不是(");
        }
        else if (exp[q] == '+' || exp[q] == '-')
        {
            if (so.empty() || so.top().t != VAL)
                throw invalid_argument("没有运算数");

            if (exp[q] == '+')
                so.push(obj(ADD));
            else
                so.push(obj(SUB));
            ++q;
        }
        else if (exp[q] == ')')
        {
            ++q;
            if (so.empty())
                throw invalid_argument("未匹配");
            if (so.top().t == VAL)
            {
                v = so.top().v;
                so.pop();
                if (so.top().t != LP)
                    throw invalid_argument("没有左括号");
                so.pop();
                new_val(so, v);
            }
        }
        else
        {
            v = stod(exp.substr(q), &p);
            q += p;
            new_val(so, v);
        }
    }
    if (so.size() != 1 || so.top().t != VAL)
        throw invalid_argument("式子错误");

    cout << so.top().v << endl;

    return 0;
}