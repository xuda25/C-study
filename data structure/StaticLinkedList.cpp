#include <iostream>
#include <assert.h>

using namespace std;

#define MAXSIZE 20
#define ElemType int

class StaticList;

// ËäÇÁÇπÁ±?
class StaticListNode
{
public:
    friend class StaticList;
    
private:
    ElemType data; // ÂÄºÂüü
    int cur; //Ê∏∏Ê†á
};


// ÈùôÊÄÅÈìæË°®Á±ª
class StaticList
{
public:
    StaticList()
    {
        int i = 2;
        for (; i < MAXSIZE - 1; ++i)
            space[i].cur = i + 1;
        space[i].cur = 0; // ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇπÊ∏∏Ê†áËÆæ‰∏?0 Ë°®Á§∫ÁªìÂ∞æ
        space[0].cur = 2; // ÊåáÂêë‰∏ã‰∏Ä‰∏™Â§áÁî®ËäÇÁÇ?
        space[1].cur = 0; // Êï∞ÊçÆËäÇÁÇπÂ§¥ÁöÑÊ∏∏Ê†á‰∏?0Ôº? Êï∞ÊçÆ‰∏∫Á©∫
    }

    ~StaticList() {}

    //Â∞æÊèíÊ≥?
    /*
    **1. ÂàÜÈÖç‰∏Ä‰∏™ÂæÖÁî®Á©∫Èó? Â≠òÊîæÊï∞ÊçÆ
    **2. ÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇ?
    **3. Êñ∞ËäÇÁÇπÂ∞æÊè?
    */
    void push_back(const ElemType& x)
    {   
        // 1.
        int i = Malloc_Sl();
        if (!i)
        {
            cout << "Error, no space!" << endl;
            return;
        }

        space[i].data = x;
        space[i].cur = 0;  // ÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥?  Ê∏∏Ê†á‰∏?0

        // 2.
        int k = 1;
        while (space[k].cur != 0)
            k = space[k].cur;

        // .3.
        space[k].cur = i;  // ÊèíÂà∞ÊúÄÂê?
        return;
    }

    // Â§¥ÊèíÊ≥?
    void push_front(const ElemType& x)
    {
        /*
        ** 1. ÂàÜÈÖçÁ©∫Èó¥
        ** 2. ÊâæÂà∞Á¨¨‰∏Ä‰∏™Á©∫Èó? ÊèíÂà∞ÂâçÈù¢
        ** 3. space[1]ÊåáÂêëÊñ∞ËäÇÁÇ?
        */
        int i = Malloc_Sl();
        if (!i)
        {
            cout << "Error, no space!" << endl;
            return;
        }

        space[i].data = x;
        space[i].cur = space[1].cur;
        space[1].cur = i;
        return;
    }

    // Âà†Èô§Â∞æÈÉ®ËäÇÁÇπ
    void pop_back()
    {
        int i = 1; // ÊâæÊúÄÂêé‰∏Ä‰∏™ËäÇÁÇ?
        int j = 0; // ÊâæÂÄíÊï∞Á¨¨‰∫å‰∏™ËäÇÁÇ?

        for (; space[i].cur != 0; j = i, i = space[i].cur)
        {}

        space[j].cur = 0;
        Free_Sl(i);
        return;
    }

    // Âà†Èô§Â§¥ÈÉ®ËäÇÁÇπ
    void pop_front()
    {
        int h = space[1].cur;
        space[1].cur = space[h].cur; // ÊåáÂêëÊñ∞ÁöÑÂ§¥ËäÇÁÇ?
        Free_Sl(h);
        return;
    }

    // ÊòæÁ§∫ÂàóË°®
    void show_list()
    {
        int i = space[1].cur;
        for (; i != 0; i = space[i].cur)
            cout << space[i].data << " ";
        cout << endl;
        return;
    }

    // ‰ªéÂ∞èÂà∞Â§ßÁöÑÈ°∫Â∫èÂâçÊèê‰∏ã ÊèíÂÖ•x
    void insert_val(const ElemType x)
    {
        /*
        ** 1. ÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™Â∞è‰∫éÁõÆÊ†áËäÇÁÇπÁöÑËäÇÁÇπ
        ** 2. ÊèíÂÖ•ÁõÆÊ†áËäÇÁÇπ
        */
        
        int i = 1;
        while (space[i].cur != 0 && space[space[i].cur].data < x)
            i = space[i].cur;

        if (space[i].cur == 0)  // kÊåáÂêëÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥?
            push_back(x);
        else if (i == 1) // k = 1 ËØ¥ÊòéxÊúÄÂ∞?
            push_front(x);
        else  // ÊèíÂÖ•‰∏≠Èó¥
        {
            int a = Malloc_Sl();
            assert(a);
            space[a].data = x;
            space[a].cur = space[i].cur;
            space[i].cur = a;
        }
        return;
    }

    // ËøîÂõûxÁöÑ‰∏ä‰∏Ä‰∏™ËäÇÁÇπÁöÑ‰∏ãÊ†á
    int find(const ElemType& x)
    {
        int i = 1;
        while (space[i].cur != 0 && space[space[i].cur].data != x)
            i = space[i].cur;
        
        if (space[i].cur == 0)
        {
            cout << "Can not find!" << endl;
            return -1;
        }
        return i;
    }

    // Âà†Èô§ÁªôÂÆöÂÄºÊâÄÂú®ÁöÑËäÇÁÇπÔº? ‰∏çÂ≠òÂú®ÂàôËøîÂõû
    void delete_val(const ElemType& x)
    {
        int i = find(x);
        if (x == -1)
            return;
        int d = space[i].cur;
        space[i].cur = space[d].cur;
        Free_Sl(d);
        return;
    }
    
    // Â∞ÜÂàóË°®ÊåâÁÖßÈùûÈÄíÂáèÈ°∫Â∫èÊéíÂ∫è
    void sort()
    {
        int s = space[1].cur;
        int p = space[s].cur;
        if(0 == p)
            return ;
        space[s].cur = 0;

        int k = 1;
        int k1 = 0;
        while(0 != p)
        {
            s = p;
            p = space[p].cur;

            k = 1;     // ÊâæÂà∞‰∏Ä‰∏™‰ΩçÁΩÆk, Âú®kÂêéÊèíÂÖ•sÊâÄÊåáËäÇÁÇπÁöÑÊï∞ÊçÆ
            while(0!=k && space[space[k].cur].data < space[s].data)
            {
                k1 = k;                  //Â¶ÇÊûúk==0,Áî®k1ËÆ∞ÂΩïÊúÄÂêé‰∏Ä‰∏™Êï∞ÊçÆËäÇÁÇ?
                k = space[k].cur;        //Âú®‰∏ãÊ†ák‰πãÂêéÊèíÂÖ•
            }
            if(0 == k)    //Â∞æÊèí
            {
                space[k1].cur = s;
                space[s].cur = 0;
            }
            else          //Â§¥ÊèíÂíå‰∏≠Èó¥Êèí
            {
                space[s].cur = space[k].cur;
                space[k].cur = s;
            }
        }
    }

    // ÈÄÜÁΩÆÈùôÊÄÅÂàóË°?
    void reverse()
    {   
        int s = space[1].cur;
        if (s == 0) return; // Ê≤°ÊúâÊï∞ÊçÆ
        int p = space[s].cur;
        if (p == 0) return;
        space[s].cur = 0;

        while (p != 0)
        {   
            s = p;
            p = space[p].cur;

            space[s].cur = space[1].cur;
            space[1].cur = s;
        }
        return;
    }

    // Ê∏ÖÁ©∫ÂàóË°®
    void clear()
    {
        for (int i = 2; i < MAXSIZE-1; ++i)
            space[i].cur = 0;

        space[0].cur = 2;
        space[1].cur = 0;
    }

    // ËøîÂõûË°®Èïø
    int length()
    {
        int count = 0;
        int i = space[1].cur;

        while (i != 0)
        {
            i = space[i].cur;
            ++count;
        }

        return count;
    }
    
    // ËøîÂõû‰∏ãË°®‰∏∫kÁöÑËäÇÁÇπÁöÑ‰∏ã‰∏Ä‰∏™‰∏ãÊ†?
    int next(const int k)
    {
        if (k == 0 || k == 1)
            return -1;
        return space[k].cur;
    }

    // ËøîÂõû‰∏ãÊ†á‰∏∫kÁöÑËäÇÁÇπÁöÑÂâç‰∏Ä‰∏™ËäÇÁÇ?
    int prio(const int k)
    {
        if (k == 0 || k == 1)
            return -1;
        
        int p = space[1].cur;
        while (p != 0 && space[p].cur != k)
            p = space[p].cur;
        
        if (p == -1)
            return -1;
        return p;
    }

    //  ÂêàÂπ∂‰∏§‰∏™‰∏§‰∏™Â∑≤Áü•ÈìæË°®Áª? ‰∏Ä‰∏™ÈìæË°? ÊåâÈùûÈÄíÂáèÈ°∫Â∫è
    void merge(StaticList& sl1, StaticList& sl2)
    {
        sl1.sort();
        sl2.sort();

        if (sl1.length() == 0 || sl2.length() == 0)
            return;
        
        int p = sl1.space[1].cur;
        int q = sl2.space[1].cur;

        while (p != 0 && q != 0)
        {
            if (sl1.space[p].data < sl2.space[q].data)
            {
                push_back(sl1.space[p].data);
                p = sl1.space[p].cur;
            }
            else
            {
                push_back(sl2.space[q].data);
                q = sl2.space[q].cur;
            }
        }

        while (p != 0)
        {
            push_back(sl1.space[p].data);
            p = sl1.space[p].cur;
        }

        while (q != 0)
        {
            push_back(sl2.space[q].data);
            q = sl2.space[q].cur;
        }
        return;
    }
protected:
    // Áî≥ËØ∑‰∏Ä‰∏™Á©∫‰ΩçÁΩÆÔº? ËøîÂõû‰ΩçÁΩÆÁöÑ‰∏ãÊ†?
    int Malloc_Sl()
    {
        int i = space[0].cur;
        if (i) space[0].cur = space[i].cur; // Êõ¥Êñ∞‰∏ã‰∏Ä‰∏™ÂæÖÁî®‰ΩçÁΩÆÁöÑ‰∏ãÊ†á
        return i;
    }
    // ÈáäÊîæËäÇÁÇπk
    void Free_Sl(int k)
    {
        space[k].cur = space[0].cur;  // ÊåáÂêëÁ¨¨‰∏Ä‰∏™Â§áÁî®ËäÇÁÇ?
        space[0].cur = k; // Êàê‰∏∫Á¨¨‰∏Ä‰∏™Â§áÁî®ËäÇÁÇ?
    }
private:
    StaticListNode space[MAXSIZE];  // ÂàÜÈÖçMAXSIZE‰∏™ËøûÁª≠Á©∫Èó¥Â≠òÊîæËäÇÁÇ?
};




int main()
{
    StaticList SL;

    StaticList SL1;    //≤‚ ‘merge()
    StaticList SL2;

    SL1.push_back(1);
    SL1.push_back(9);
    SL1.push_back(0);
    SL1.push_back(6);
    SL1.push_back(999);

    SL2.push_back(5);
    SL2.push_back(8);
    SL2.push_back(100);

    ElemType Item = 0;
    int select = 1;
    while(select)
    {
        cout<<"********************************************"<<endl;
        cout<<"*[1] push_back           [2]  push_front   *"<<endl;
        cout<<"*[3] show_list           [4]  pop_back     *"<<endl;
        cout<<"*[5] pop_front           [6]  insert_val   *"<<endl;
        cout<<"*[7] length              [8]  find         *"<<endl;
        cout<<"*[9] merge               [10] delete_val   *"<<endl;
        cout<<"*[11] sort               [12] reserve      *"<<endl;
        cout<<"*[13] next               [14] prio         *"<<endl;
        cout<<"*[15] clear              [16] destroy      *"<<endl;
        cout<<"*[0] quit_sys                              *"<<endl;
        cout<<"********************************************"<<endl;
        cout<<"«Î—°‘Ò£∫°∑";
        cin>>select;
        switch(select)
        {
        case 1:
            cout<<" ‰»Î“™Œ≤≤Âµƒ ˝æ›:(-1Ω· ¯)>";
            while(cin>>Item && -1 != Item)
                SL.push_back(Item);
            break;

        case 2:
            cout<<" ‰»Î“™Õ∑≤Âµƒ ˝æ›:(-1Ω· ¯)>";
            while(cin>>Item && -1 != Item)
                SL.push_front(Item);
            break;

        case 3:
            SL.show_list();
            break;
        case 4:
            SL.pop_back();
            break;

        case 5:
            SL.pop_front();
            break;

        case 6:
            cout<<" ‰»Î“™≤Â»Îµƒ ˝æ›:>";
            cin>>Item;
            SL.insert_val(Item);
            break;

        case 7:
            cout<<"¡¥±Ì≥§∂»Œ™£∫"<<SL.length()<<endl;
            break;

        case 8:
            cout<<" ‰»Î“™≤È’“µƒ ˝æ›:>";
            cin>>Item;
            SL.find(Item);
            break;

        case 9:
            SL.merge(SL1, SL2);
            break;

        case 10:
            cout<<" ‰»Î“™…æ≥˝µƒ ˝æ›:>";
            cin>>Item;
            SL.delete_val(Item);
            break;

        case 11:
            SL.sort();
            break;

        case 12:
            SL.reverse();
            break;

        case 13:
            SL.next(0);
            break;

        case 14:
            SL.prio(0);
            break;

        case 15:
            SL.clear();
            break;

        case 16:
            SL.~StaticList();
            break;

        default:
            break;
        }
    }
}